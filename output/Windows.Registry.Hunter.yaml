
name: Windows.Registry.Hunter
description: |
   This artifact parses and categorizes information for the registry.

   ## Remapping Strategy

   The artifact works by deploying search rules against the registry.
   A rule searches for a specific piece of data

   1. SAM is mapped to /SAM/
   2. NTUser.dat is mapped to HKEY_USERS/*
   3. System and Software hives are mappeed to HKEY_LOCAL_MACHINE and CurrentControlSet

parameters:
- name: CategoryFilter
  type: regex
  default: .
- name: CategoryExcludedFilter
  type: regex
  default: XXXXXX
- name: DescriptionFilter
  type: regex
  default: .
- name: RootFilter
  type: regex
  default: .
- name: RemappingStrategy
  description:
  type: choices
  default: "API And NTUser.dat"
  choices:
   - API
   - API And NTUser.dat
   - Raw Hives

- name: NTFS_CACHE_TIME
  type: int
  description: How often to flush the NTFS cache. (Default is never).
  default: "1000000"


imports:
  - Windows.Registry.NTUser

export: |
    // Map raw hives for hives that are not normally accessible via API
    LET _unmounted_hive_mapping = (
      _map_file_to_reg_path(
          HivePath="C:/Windows/System32/Config/SAM",
          RegistryPath="SAM",
          RegMountPoint="/",
          Accessor="auto",
          Description="Map SAM to /SAM/"),
      _map_file_to_reg_path(
          HivePath="C:/Windows/appcompat/Programs/Amcache.hve",
          RegistryPath="Amcache",
          RegMountPoint="/",
          Accessor="auto",
          Description="Map Amcache to /Amcache/"),
    ) + _required_mappings

    LET _api_remapping <= (
      dict(type="mount",
        `from`=dict(accessor="registry", prefix='/', path_type='registry'),
       on=dict(accessor="registry", prefix='/', path_type="registry")),
    )

    -- In API mode we sometimes can not access the keys due to permissions.
    -- We also map the raw hives to the raw_registry accessor to ensure
    -- that we can access protected keys.
    LET _raw_hive_mapping_for_api <= (
      dict(type="mount",
        `from`=dict(accessor="raw_reg",
         prefix=pathspec(Path='/',
           DelegatePath="C:/Windows/System32/Config/SYSTEM",
           DelegateAccessor="ntfs"),
         path_type='registry'),
       on=dict(accessor="raw_registry",
               prefix='/HKEY_LOCAL_MACHINE/System',
               path_type="registry")),
      dict(type="mount",
        `from`=dict(accessor="raw_reg",
         prefix=pathspec(Path='/',
           DelegatePath="C:/Windows/System32/Config/SOFTWARE",
           DelegateAccessor="ntfs"),
         path_type='registry'),
       on=dict(accessor="raw_registry",
               prefix='/HKEY_LOCAL_MACHINE/Software',
               path_type="registry")),
    )

    // The BCD hive is normally located on an unmounted drive so we
    // always map it with the API
    LET _bcd_map <= (dict(
       type="mount",
       `from`=dict(accessor="registry", prefix='HKEY_LOCAL_MACHINE\\BCD00000000', path_type='registry'),
       on=dict(accessor="registry", prefix='HKEY_LOCAL_MACHINE\\BCD00000000', path_type="registry")))

    // Apply the mappings:
    LET RemapRules = if(condition=RemappingStrategy = "API",
       then=_api_remapping +
            _unmounted_hive_mapping +
            _raw_hive_mapping_for_api,

    else=if(condition=RemappingStrategy = "API And NTUser.dat",
       then=_api_remapping +
            _user_mappings +
            _unmounted_hive_mapping +
            _raw_hive_mapping_for_api,

    else=_user_mappings +
         _unmounted_hive_mapping +
         _standard_mappings +
         _bcd_map))

    LET FetchKeyValues(OSPath) = to_dict(item={
      SELECT Name AS _key, Data.value AS _value
      FROM glob(globs="*", accessor="registry", root=OSPath)
    })
    
    LET GetDateFrom128Bit(x) = parse_binary(accessor="data",
      filename=x, profile='''
      [["X", 0, [
         ["year", 0, "uint16"],
         ["month", 2, "uint16"],
         ["day", 6, "uint16"],
         ["hour", 8, "uint16"],
         ["minute", 10, "uint16"],
         ["seconds", 12, "uint16"],
         ["Date", 0, "Value", {
            value: "x=>format(format='%04d-%02d-%02dT%02d:%02d:%02d', args=[x.year, x.month, x.day, x.hour, x.minute, x.seconds])"
          }]
      ]]]
      ''', struct="X").Date
    
    LET FormatMAC(x) = parse_binary(accessor="data",
      filename=x, profile='''
      [["X", 0, [
        ["x0", 0, "uint8"],
        ["x1", 1, "uint8"],
        ["x2", 2, "uint8"],
        ["x3", 3, "uint8"],
        ["x4", 4, "uint8"],
        ["x5", 5, "uint8"],
        ["mac", 0, Value, {"value": "x=>format(format='%02x:%02x:%02x:%02x:%02x:%02x', args=[x.x0, x.x1, x.x2, x.x3, x.x4, x.x5])"}]
      ]]]
      ''', struct="X").mac
    
    LET ExtractValueFromComment(x) = parse_string_with_regex(
      string=x.Metadata.Comment, regex=format(format="%v [=-] ([^,]+)", args=x.Data)).g1
    
    -- Map from binary integer to a winfiletime - handle both binary encoding and integers
    LET FILETIME(t) = if(condition=format(format="%T", args=[t,]) =~ "\\[\\]uint8",
       then=timestamp(winfiletime=parse_binary(accessor="data", filename=t, struct="uint64") || 0),
       else=timestamp(winfiletime=t || 0))
    
    LET GetRawValue(OSPath) = stat(filename=OSPath, accessor="raw_registry").Data.value
    
    LET GetValue(OSPath) = stat(filename=OSPath, accessor="registry").Data.value
    
    

    LET _MD <= parse_json_array(data=gunzip(string=base64decode(string="")))
    LET MD(DescriptionFilter, RootFilter, CategoryFilter, CategoryExcludedFilter) = SELECT * FROM _MD
     WHERE Description =~ DescriptionFilter
       AND Root =~ RootFilter
       AND Category =~ CategoryFilter
       AND NOT Category =~ CategoryExcludedFilter

sources:
- name: Remapping
  query: |
    SELECT * FROM RemapRules

- name: Rules
  query: |
    LET AllRules <=
      SELECT * FROM MD(DescriptionFilter=DescriptionFilter, RootFilter=RootFilter,
        CategoryFilter=CategoryFilter, CategoryExcludedFilter=CategoryExcludedFilter)
    SELECT * FROM AllRules

- name: Globs
  query: |
    LET AllGlobs <=
      SELECT Root, enumerate(items=Glob) AS Globs
      FROM AllRules
      GROUP BY Root

    SELECT * FROM AllGlobs

- query: |
    LET GlobsMD <= to_dict(item={
      SELECT Root AS _key, Globs AS _value FROM AllGlobs
    })

    LET s = scope()

    LET Cache <= memoize(query={
       SELECT Glob, Category, Description, s.Details AS Details, s.Comment AS Comment, s.Filter AS Filter
       FROM AllRules
    }, key="Glob", period=100000)

    LET _ <= remap(config=dict(remappings=RemapRules))

    LET Result = SELECT OSPath, Mtime,
       Data.value AS Data,
       get(item=Cache, field=Globs[0]) AS Metadata,
       Globs[0] AS _Glob,
       IsDir
    FROM foreach(row={
       SELECT _key AS Root, _value AS GlobsToSearch
       FROM items(item=GlobsMD)
       WHERE Root =~ RootFilter
         AND log(message="Will search with globs %v at Root point %v",
             dedup=-1, args=[GlobsToSearch, Root])

    }, query={
       SELECT * FROM glob(globs=GlobsToSearch, root=Root, accessor="registry")
    }, workers=20)

    SELECT Metadata.Description AS Description,
           Metadata.Category AS Category,
           OSPath, Mtime, Data AS _RawData,
           eval(func=Metadata.Details || "x=>x.Data") || Data AS Details,
           Metadata AS _Metadata
    FROM Result
    WHERE eval(func=Metadata.Filter || "x=>NOT IsDir")
      AND Category =~ CategoryFilter
      AND Metadata.Description =~ DescriptionFilter
